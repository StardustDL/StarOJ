@page "/ide"
@using StarOJ.Models.Judging
@inherits BaseIdePage

<PageHeader>
    <PageHeaderTitle>IDE</PageHeaderTitle>
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem>
                <a href="">
                    <MdiIcon Type="home" />
                    <span>Home</span>
                </a>
            </BreadcrumbItem>
            <BreadcrumbItem>
                <span>
                    <MdiIcon Type="console" />
                    <span>IDE</span>
                </span>
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
    <PageHeaderExtra>
        <div class="btn-group-toggle mx-auto" role="group">
            <button class="btn btn-primary mdi mdi-upload" @onclick="@(async e=>await OnSubmit())">Submit</button>
            @if (JudgingTask != null)
            {
                <button class="btn btn-success mdi mdi-refresh" @onclick="@(async e=>await OnFresh())">Fresh</button>
            }
        </div>
    </PageHeaderExtra>
</PageHeader>

<Row Style="height: 100%; width: 100%">
    <Col Span="12" Style="padding-right: 60px">
    <MonacoEditor @ref="codeEditor" Id="code-editor" ConstructionOptions="CodeEditorConstructionOptions" />
    </Col>
    <Col Span="12">
    <div class="form-group">
        <label>Language</label>
        <select class="form-control" @onchange="@(async e=>await OnLanguageChange(e))">
            @foreach (CodeLanguage v in Enum.GetValues(typeof(CodeLanguage)))
            {
                if (v == model.Language)
                {
                    <option value="@((int)v)" selected>@Enum.GetName(typeof(CodeLanguage), v)</option>
                }
                else
                {
                    <option value="@((int)v)">@Enum.GetName(typeof(CodeLanguage), v)</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label>Input</label>
        <textarea class="form-control" rows="10" @bind="@model.StandardInput"></textarea>
    </div>
    @if (JudgingTask != null)
    {
        <div class="form-group">
            <label>Output</label>
            <textarea class="form-control" rows="10" readonly>@JudgingTask.StandardOutput</textarea>
        </div>
        @if (!string.IsNullOrEmpty(JudgingTask.StandardError))
        {
            <div class="form-group">
                <label>Error Output</label>
                <textarea class="form-control invalid" rows="10" readonly>@JudgingTask.StandardError</textarea>
            </div>
        }
        @if (!string.IsNullOrEmpty(JudgingTask.CompileOutput))
        {
            <div class="form-group">
                <label>Compile Output</label>
                <textarea class="form-control invalid" rows="10" readonly>@JudgingTask.CompileOutput</textarea>
            </div>
        }
    }
    </Col>
</Row>


@code {
    private MonacoEditor codeEditor { get; set; }

    public class Model
    {
        public string StandardInput { get; set; }

        public CodeLanguage Language { get; set; } = CodeLanguage.C;
    }

    Model model = new Model();

    protected override void OnInitialized()
    {
        BrowserResizeService.OnResize += BrowserHasResized;
        base.OnInitialized();
    }

    private async Task BrowserHasResized()
    {
        if (codeEditor != null)
            await codeEditor.Layout();
    }

    public override void Dispose()
    {
        BrowserResizeService.OnResize -= BrowserHasResized;
        base.Dispose();
    }

    private StandaloneEditorConstructionOptions CodeEditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "c",
            GlyphMargin = true,
            Value = "#include <stdio.h>\n" +
                    "int main() {\n" +
                    "    printf(\"hello world!\\n\");\n" +
                    "}"
        };
    }

    private JudgingTask JudgingTask { get; set; }

    private async Task OnLanguageChange(ChangeEventArgs e)
    {
        model.Language = (CodeLanguage)int.Parse(e.Value.ToString());
        await MonacoEditor.SetModelLanguage(await codeEditor.GetModel(), Utils.GetMonacoLanguageId(model.Language));
    }

    private async Task OnSubmit()
    {
        await BrowserHasResized();

        JudgingTask = new JudgingTask
        {
            Code = await codeEditor.GetValue(),
            StandardInput = model.StandardInput,
            Language = model.Language,
        };

        JudgingTask.Id = await Service.JudgerService.Create(JudgingTask);
    }

    private async Task OnFresh()
    {
        await BrowserHasResized();

        JudgingTask = await Service.JudgerService.Get(JudgingTask.Id);
    }
}
