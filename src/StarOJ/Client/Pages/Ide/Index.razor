@page "/ide"
@using StarOJ.Models.Judging
@inherits BaseIdePage

<PageHeader>
    <PageHeaderTitle>IDE</PageHeaderTitle>
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem>
                <a href="">
                    <MdiIcon Type="home" />
                    <span>Home</span>
                </a>
            </BreadcrumbItem>
            <BreadcrumbItem>
                <span>
                    <MdiIcon Type="console" />
                    <span>IDE</span>
                </span>
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
    <PageHeaderExtra>
        <div class="btn-group-toggle mx-auto" role="group">
            @if (JudgingTask != null)
            {
                <button class="btn btn-success mdi mdi-refresh" @onclick="@(e=>OnFresh())">Fresh</button>
            }
            <button class="btn btn-primary mdi mdi-upload" @onclick="@(e=>OnSubmit())">Submit</button>
        </div>
    </PageHeaderExtra>
</PageHeader>

<Row Style="height: 100%; width: 100%">
    <Col Span="12">
    <MonacoEditor @ref="codeEditor" Id="code-editor" ConstructionOptions="CodeEditorConstructionOptions" />
    </Col>
    <Col Span="12">
    <Row Style="height: 50%; width: 100%">
        <MonacoEditor @ref="inputEditor" Id="input-editor" ConstructionOptions="InputEditorConstructionOptions" />
    </Row>
    <Row Style="height: 50%; width: 100%">
        <MonacoEditor @ref="outputEditor" Id="output-editor" ConstructionOptions="OutputEditorConstructionOptions" />
    </Row>
    </Col>
</Row>


@code {
    private MonacoEditor codeEditor { get; set; }

    private MonacoEditor inputEditor { get; set; }

    private MonacoEditor outputEditor { get; set; }

    protected override void OnInitialized()
    {
        BrowserResizeService.OnResize += BrowserHasResized;
        base.OnInitialized();
    }

    private async Task BrowserHasResized()
    {
        if (codeEditor != null)
            await codeEditor.Layout();
        if (inputEditor != null)
            await inputEditor.Layout();
        if (outputEditor != null)
            await outputEditor.Layout();
    }

    public override void Dispose()
    {
        BrowserResizeService.OnResize -= BrowserHasResized;
        base.Dispose();
    }

    private StandaloneEditorConstructionOptions CodeEditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "c",
            GlyphMargin = true,
            Value = "#include <stdio.h>\n" +
                    "int main() {\n" +
                    "    printf(\"hello world!\\n\");\n" +
                    "}"
        };
    }

    private StandaloneEditorConstructionOptions InputEditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "plaintext",
            GlyphMargin = true,
            Value = ""
        };
    }

    private StandaloneEditorConstructionOptions OutputEditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "plaintext",
            GlyphMargin = true,
            Value = ""
        };
    }

    private JudgingTask JudgingTask { get; set; }

    private async Task OnSubmit()
    {
        JudgingTask = new JudgingTask
        {
            Code = await codeEditor.GetValue(),
            StandardInput = await inputEditor.GetValue(),
            Language = CodeLanguage.C,
        };

        JudgingTask.Id = await Service.JudgerService.Create(JudgingTask);
    }

    private async Task OnFresh()
    {
        JudgingTask = await Service.JudgerService.Get(JudgingTask.Id);
        await outputEditor.SetValue(JudgingTask.StandardOutput);
    }
}
